## 电话本项目

从文件读取数据到链表时，先用`fgets()`把文件中的数据一行一行的存在字符数组中；

再用`sscanf()`把字符数中的数据存到链表中

`sscanf` 和 `fscanf` 都是用于从字符串或文件中读取数据的函数，它们各自有其适用的场景和优势。

**sscanf**：

- 优势：
  - `sscanf` 适用于从字符串中解析数据。如果你已经有一个字符串，想要从中提取数据并进行处理，那么 `sscanf` 是一个很方便的选择。
  - `sscanf` 可以直接处理内存中的字符串，不需要考虑文件 I/O，因此更加灵活。
- 不足：
  - `sscanf` 需要将整个字符串读入内存中，如果字符串较大或者需要频繁处理大量数据，可能会导致内存消耗增加。
  - 对于大规模数据的处理，可能效率不如直接从文件中读取。

**fscanf**：

- 优势：
  - `fscanf` 适用于从文件中读取数据。如果你需要处理大量数据存储在文件中，那么 `fscanf` 是一个更合适的选择。
  - `fscanf` 可以直接从文件流中读取数据，避免了将整个文件读入内存的开销。
- 不足：
  - `fscanf` 需要处理文件 I/O，相比于 `sscanf` 在处理字符串时可能稍显麻烦。
  - 对于需要频繁处理大量字符串数据的情况，可能效率不如 `sscanf`。

综上所述，选择使用 `sscanf` 还是 `fscanf` 取决于你的具体需求。如果你需要从字符串中解析数据或者数据规模较小，可以考虑使用 `sscanf`。如果你需要处理大量存储在文件中的数据，可以选择使用 `fscanf`。

`sscanf(line, "%d,%49[^,],%19[^,],%99[^\n]", &newnode->id, newnode->name, newnode->phonenum, newnode->note);` 这一行代码是从字符串 `line` 中按照指定的格式读取数据，并将这些数据存储到 `newnode` 结构体的成员中。以下是具体的解释：

### 格式字符串详解

- `"%d,%49[^,],%19[^,],%99[^\n]"` 是格式字符串，它定义了如何从 `line` 中解析数据：
  - `%d`：读取一个整数，并存储到 `newnode->id` 中。
  - `,%49[^,]`：读取一个以逗号分隔的字符串，最多读取 49 个字符，直到遇到逗号为止。读取的字符串存储到 `newnode->name` 中。`[^,]` 表示匹配所有非逗号的字符。
  - `,%19[^,]`：读取另一个以逗号分隔的字符串，最多读取 19 个字符，直到遇到逗号为止。读取的字符串存储到 `newnode->phonenum` 中。
  - `,%99[^\n]`：读取最后一个以逗号分隔的字符串，最多读取 99 个字符，直到遇到换行符为止。读取的字符串存储到 `newnode->note` 中。

### 具体解析步骤

假设 `line` 的内容是 `"1,John Doe,123-456-7890,Friend from work"`，那么 `sscanf` 将按照如下方式解析：

1. `"%d"`：从 `line` 的开头读取一个整数 `1`，并将其存储到 `newnode->id` 中。
2. `",%49[^,]"`：跳过一个逗号 `,`，然后读取最多 49 个非逗号字符 `"John Doe"`，并将其存储到 `newnode->name` 中。
3. `",%19[^,]"`：跳过一个逗号 `,`，然后读取最多 19 个非逗号字符 `"123-456-7890"`，并将其存储到 `newnode->phonenum` 中。
4. `",%99[^\n]"`：跳过一个逗号 `,`，然后读取最多 99 个非换行符字符 `"Friend from work"`，并将其存储到 `newnode->note` 中。

### 参数解释

- `line`：包含要解析的字符串。
- `"%d,%49[^,],%19[^,],%99[^\n]"`：格式字符串，指定了如何解析 `line` 中的数据。
- `&newnode->id`：指向 `newnode` 结构体中 `id` 成员的指针，用于存储解析出的整数。
- `newnode->name`：指向 `newnode` 结构体中 `name` 成员的指针，用于存储解析出的名字字符串。
- `newnode->phonenum`：指向 `newnode` 结构体中 `phonenum` 成员的指针，用于存储解析出的电话号码字符串。
- `newnode->note`：指向 `newnode` 结构体中 `note` 成员的指针，用于存储解析出的备注字符串。

### 总结

`sscanf` 函数通过格式字符串 `%d,%49[^,],%19[^,],%99[^\n]` 从 `line` 中解析出一个整数和三个字符串，并将它们分别存储到 `newnode` 结构体的 `id`、`name`、`phonenum` 和 `note` 成员中。这种方法适用于从已知格式的字符串中提取结构化数据。

#### 读取文件

```c
newnode->next=NULL;
        if(!head){
            head=newnode;
        }
        else{
            PHONE *cur=head;
            while(cur->next){
                cur=cur->next;
            }
            cur->next=newnode;
        }
```

下面是这个代码段的图示解释，这段代码的作用是将一个新节点 `newnode` 添加到链表的末尾。我们用图示来说明这个过程。

### 初始状态

假设当前链表是空的，或者已经有一些节点。我们将展示两种情况：

#### 情况 1：链表为空

- 初始状态：

  ```
  head -> NULL
  ```

#### 情况 2：链表已有一些节点

- 初始状态：

  ```
  head -> [Node1] -> [Node2] -> NULL
  ```

### 1. 初始化新节点的 `next` 指针

不论链表是否为空，我们首先初始化新节点的 `next` 指针：

```c
newnode->next = NULL;
```

此时新节点 `newnode` 的状态为：

```
newnode -> [NewNode] -> NULL
```

### 2. 检查链表是否为空

#### 情况 1：链表为空

```c
if (!head) {
    head = newnode;
}
```

- 检查 `head` 是否为 `NULL`。如果是，表示链表为空。
- 将 `head` 指向 `newnode`，使 `newnode` 成为链表的第一个节点。

图示：

```
head -> [NewNode] -> NULL
```

#### 情况 2：链表已有一些节点

```c
else {
    PHONE *cur = head;
    while (cur->next) {
        cur = cur->next;
    }
    cur->next = newnode;
}
```

- 声明一个指针 `cur` 并将其初始化为 `head`。
- 使用 `while (cur->next)` 循环遍历链表，直到找到最后一个节点。
- 将最后一个节点的 `next` 指针指向 `newnode`。

### 图示过程

#### 初始链表

```
head -> [Node1] -> [Node2] -> NULL
```

#### 第一步：声明 `cur` 并初始化为 `head`

```
cur
 |
 v
head -> [Node1] -> [Node2] -> NULL
```

#### 第二步：遍历链表，找到最后一个节点

- `cur = cur->next` 执行一次

```
        cur
         |
         v
head -> [Node1] -> [Node2] -> NULL
```

- `cur = cur->next` 执行第二次

```
                cur
                 |
                 v
head -> [Node1] -> [Node2] -> NULL
```

#### 第三步：将最后一个节点的 `next` 指针指向 `newnode`

```
cur->next = newnode;
```

图示结果：

```
head -> [Node1] -> [Node2] -> [NewNode] -> NULL
```

### 完整过程总结

无论链表最初是空的还是已有一些节点，代码都会将 `newnode` 正确地添加到链表的末尾。通过初始化新节点的 `next` 指针为 `NULL`，然后检查链表是否为空，来决定是将新节点作为第一个节点，还是将其链接到已有链表的末尾。这个过程有效地管理了链表结构，确保新节点总是添加到链表的末尾。

### 删除

```c
PHONE *cur=head;
    PHONE *pre=NULL;
    while(cur&&cur->id!=id){
        pre=cur;
        cur=cur->next;
    }
    if(!cur){
        printf("未找到联系人\n");
    }
    if(!pre){
        pre->next=cur->next;
    }
    free(cur);
    count--;
    cur=head;
    int index=1;
    while(cur){
        cur->id=index++;
        cur=cur->next;
    }
```

这段代码是用来删除链表中指定ID的节点的。下面逐步解释其删除过程：

1. **初始化指针：**
   - `cur` 和 `pre` 分别指向链表的头部和 `NULL`。`cur` 用于遍历链表，`pre` 则是用来记录 `cur` 的前一个节点。

2. **遍历链表直到找到要删除的节点：**
   - 这个过程通过一个 `while` 循环实现。条件 `cur && cur->id != id` 意味着只要 `cur` 不为空且当前节点的 ID 不等于要删除的 ID，就继续遍历。
   - 在循环内部，`pre` 被设置为 `cur` 的前一个节点，`cur` 移动到下一个节点。

3. **检查是否找到要删除的节点：**
   - 如果 `cur` 为空，说明遍历完整个链表都没有找到要删除的节点，那么打印未找到联系人的消息。

4. **删除节点：**
   - 如果 `pre` 为空（即头节点就是要删除的节点），则直接将头指针 `head` 指向当前节点的下一个节点 `cur->next`，从而跳过当前节点。然后释放当前节点 `cur` 占用的内存。
   - 如果 `pre` 不为空，则将 `pre->next` 指向 `cur->next`，然后释放当前节点 `cur` 占用的内存。

5. **更新计数和节点ID：**
   - 减少节点计数 `count`。
   - 重新遍历链表，并为每个节点重新分配ID，从而保持节点ID的顺序性。

综上所述，这段代码删除节点的过程包括查找要删除的节点、调整指针、释放内存以及更新链表中的节点ID。

```c
while(getchar()!='\n');    //清理上一个scanf()后留在缓冲区的的回车
    printf("请输入新的姓名（留空保持不变）:");
    char newname[50];
    fgets(newname,sizeof(newname),stdin);
    if(newname[0]!='\n'){
        newname[strcspn(newname,"\n")]='\0';  //去掉换行符
        strcpy(cur->name,newname);
    }
```

### 1. 清理缓冲区

```c
while (getchar() != '\n');
```

在调用`scanf`读取用户输入（例如整数或字符串）后，输入缓冲区中可能会残留换行符（回车键）。这段代码通过不断调用`getchar()`来读取并丢弃输入缓冲区中的所有字符，直到遇到换行符`\n`为止，从而清理缓冲区。

### 2. 提示用户输入新的姓名

```c
printf("请输入新的姓名（留空保持不变）：");
char newname[50];
```

提示用户输入新的姓名，并定义一个字符数组`newName`用于存储用户输入的内容。

### 3. 使用 `fgets` 读取输入

```c
fgets(newname, sizeof(newname), stdin);
```

`fgets`函数从标准输入中读取一行字符，并将其存储在`newName`数组中。读取的内容包括用户输入的字符和结尾的换行符`\n`（如果输入字符数未超过数组大小）。例如：

- 如果用户输入了`"Alice"`并按下回车，`newName`将包含`"Alice\n"`.
- 如果用户直接按下回车，`newName`将包含仅有一个换行符，即`"\n"`.

### 4. 检查输入内容

```c
if (newname[0] != '\n') {
```

这里检查`newName`数组的第一个字符是否为换行符`\n`：

- 如果用户直接按下回车键，`newName[0]`将是`\n`。
- 如果用户输入了非空内容，`newName[0]`将是输入的第一个字符。

### 5. 去掉换行符并更新姓名

```c
newName[strcspn(newname, "\n")] = '\0';  // 去掉换行符
strcpy(cur->name, newname);
```

如果`newName[0]`不是换行符，说明用户输入了实际内容：

- `strcspn(newName, "\n")`找到换行符在`newName`中的位置，并将其替换为字符串结束符`\0`，从而去掉输入中的换行符。
- 使用`strcpy`函数将用户输入的新名字复制到当前联系人`cur`的`name`字段中。

### 6. 保持不变的情况

当用户直接按下回车键：

- `fgets`读取到的`newName`是一个只有换行符的字符串，`newName[0]`是`\n`。
- 条件`if (newName[0] != '\n')`不满足，因此不会进入代码块。
- `strcpy(cur->name, newName);`不会执行，当前联系人的`name`字段保持不变。

这种设计逻辑确保了用户如果直接按回车键，程序不会修改当前联系人的姓名字段，而是保持其原来的内容不变。

## `strcspn`是一个标准C库函数，定义在`<string.h>`头文件中。它的作用是计算字符串中第一个出现的给定字符集合中的任意字符的位置。

### 函数原型

```c
size_t strcspn(const char *s1, const char *s2);
```

### 参数说明

- `s1`：指向要扫描的字符串。
- `s2`：指向包含多个字符的字符串，这些字符在`s1`中查找。

### 返回值

该函数返回一个整数值，这个值表示在`s1`中第一个包含`s2`中的任意字符的位置。如果`s1`中不包含`s2`中的任何字符，则返回`s1`的长度。

### 工作原理

`strcspn`从`s1`的起始位置开始扫描，直到遇到`s2`中任意一个字符为止，并返回这个字符的位置索引。索引从0开始。

### 示例

以下是一个使用`strcspn`的示例：

```c
#include <stdio.h>
#include <string.h>

int main() {
    const char *s1 = "Hello, world!";
    const char *s2 = "ow";

    size_t position = strcspn(s1, s2);

    printf("在字符串 \"%s\" 中，第一个包含 \"%s\" 中任意字符的位置是 %zu\n", s1, s2, position);

    return 0;
}
```

### 示例输出

```
在字符串 "Hello, world!" 中，第一个包含 "ow" 中任意字符的位置是 4
```

### 在 `fgets` 中的具体应用

在你的代码中，`strcspn`用于找到换行符的位置，并将其替换为字符串结束符`\0`，如下所示：

```c
fgets(newName, sizeof(newName), stdin);
if (newName[0] != '\n') {
    newName[strcspn(newName, "\n")] = '\0';  // 去掉换行符
    strcpy(cur->name, newName);
}
```

假设用户输入了`"Alice\n"`，`fgets`将读取这个字符串并存储在`newName`中。此时：

- `newName`内容是`"Alice\n"`.
- `strcspn(newName, "\n")`返回4，表示`\n`在`newName`中的索引位置。
- `newName[strcspn(newName, "\n")] = '\0';`将`\n`替换为`\0`，将字符串终止在正确的位置，使`newName`变成`"Alice"`。

这种处理确保了读取的字符串是干净的，没有多余的换行符，从而方便后续的字符串操作。



这个 `SORT` 函数实现了对单链表中的联系人按姓名进行字母顺序排序。它使用的是一种冒泡排序（Bubble Sort）算法变体，适用于单链表。让我们详细解释一下每一步的操作和逻辑：

### 函数原型

```c
void sort() {
    if (!head || !head->next) {
        return;
    }

    PHONE *i, *j;
    PHONE *prev_j, *temp;

    for (i = head; i->next != NULL; i = i->next) {
        prev_j = NULL;
        for (j = head; j->next != NULL; prev_j = j, j = j->next) {
            if (strcmp(j->name, j->next->name) > 0) {
                // 如果 j 是头节点
                if (prev_j == NULL) {
                    temp = j->next;
                    j->next = temp->next;
                    temp->next = j;
                    head = temp;
                    j = temp;
                } else {
                    temp = j->next;
                    j->next = temp->next;
                    temp->next = j;
                    prev_j->next = temp;
                    j = temp;
                }
            }
        }
    }
    printf("联系人已按姓名排序。\n");
    saveToFile();
}
```

### 步骤和逻辑

1. **检查链表是否为空或只有一个节点**：

   ```c
   if (!head || !head->next) {
       return;
   }
   ```

   如果链表为空或只有一个节点，则无需排序，直接返回。

2. **初始化指针**：

   ```c
   PHONE *i, *j;
   PHONE *prev_j, *temp;
   ```

   - `i`：用于外层循环，遍历整个链表。
   - `j`：用于内层循环，比较相邻节点。
   - `prev_j`：用于记录`j`的前一个节点，方便交换节点。
   - `temp`：用于暂存节点，帮助交换。

3. **外层循环**：

   ```c
   for (i = head; i->next != NULL; i = i->next) {
   ```

   遍历链表，`i`用于控制外层循环的次数，实际排序是通过内层循环完成的。

4. **内层循环**：

   ```c
   prev_j = NULL;
   for (j = head; j->next != NULL; prev_j = j, j = j->next) {
   ```

   遍历链表，`j`用于比较相邻节点，`prev_j`记录`j`的前一个节点。

5. **比较和交换**：

   ```c
   if (strcmp(j->name, j->next->name) > 0) {
   ```

   使用`strcmp`比较`j`和`j->next`的名字，如果`j`的名字在字母顺序上大于`j->next`的名字，就交换它们。

6. **交换逻辑**：

   - **如果`j`是头节点**：

     ```c
     if (prev_j == NULL) {
         temp = j->next;
         j->next = temp->next;
         temp->next = j;
         head = temp;
         j = temp;
     }
     ```

     - 将`j->next`节点暂存到`temp`。
     - 将`j`的`next`指向`temp->next`。
     - 将`temp`的`next`指向`j`。
     - 更新头节点为`temp`。
     - 更新`j`为`temp`。

   - **如果`j`不是头节点**：

     ```c
     else {
         temp = j->next;
         j->next = temp->next;
         temp->next = j;
         prev_j->next = temp;
         j = temp;
     }
     ```

     - 将`j->next`节点暂存到`temp`。
     - 将`j`的`next`指向`temp->next`。
     - 将`temp`的`next`指向`j`。
     - 将`prev_j`的`next`指向`temp`。
     - 更新`j`为`temp`。

7. **保存和打印**：

   ```c
   printf("联系人已按姓名排序。\n");
   saveToFile();
   ```

   在排序完成后，保存链表到文件，并打印提示信息。

### 总结

该函数通过两层嵌套循环遍历链表并比较相邻节点的姓名，如果需要交换则进行节点的交换，直至整个链表按姓名字母顺序排序。使用冒泡排序算法，每次内层循环会将未排序部分中最大的元素移到末尾。

为了详细说明在链表中进行节点交换的过程，我们需要展示每一步操作的具体变化，特别是在`prev_j`为`NULL`和非`NULL`的情况下。以下是详细图解。

### 初始链表

假设链表如下：

```
head -> [Charlie] -> [Alice] -> [Bob] -> NULL
```

`j` 指向 `Charlie`。

### 情况1: `prev_j`为`NULL`

这是指`j`是头节点的情况。

#### 交换前

```
head -> [Charlie] -> [Alice] -> [Bob] -> NULL
```

`j` 指向 `Charlie`，`prev_j` 为 `NULL`，`temp` 指向 `Alice`。

​                                                               `temp=j->next`

#### 交换操作

1. 将 `j->next` 指向 `temp->next`（即 `Bob`）
2. 将 `temp->next` 指向 `j`（即 `Charlie`）
3. 更新 `head` 指向 `temp`（即 `Alice`）
4. 更新 `j` 为 `temp`（即 `Alice`）

#### 交换后

```
head -> [Alice] -> [Charlie] -> [Bob] -> NULL
```

`j` 和 `prev_j`都更新，指向`Alice`和`Charlie`。

### 情况2: `prev_j`不为`NULL`

这是指`j`不是头节点的情况。

#### 交换前

假设链表如下，且`prev_j`指向`Alice`，`j`指向`Charlie`：

```
head -> [Alice] -> [Charlie] -> [Bob] -> NULL
```

`prev_j` 指向 `Alice`，`j` 指向 `Charlie`，`temp` 指向 `Bob`。

#### 交换操作

1. 将 `j->next` 指向 `temp->next`（即 `NULL`）
2. 将 `temp->next` 指向 `j`（即 `Charlie`）
3. 将 `prev_j->next` 指向 `temp`（即 `Bob`）
4. 更新 `j` 为 `temp`（即 `Bob`）

#### 交换后

```
head -> [Alice] -> [Bob] -> [Charlie] -> NULL
```

`j` 和 `prev_j`都更新，指向`Bob`和`Charlie`。

### 详细图解



### 情况 1: `prev_j` 为 `NULL`

初始链表：

```
head -> [Charlie] -> [Alice] -> [Bob] -> NULL
```

`j` 指向 `Charlie`，`temp` 指向 `Alice`，`prev_j` 为 `NULL`。

1. **初始状态：**  `temp = j->next`

```
head -> [Charlie] -> [Alice] -> [Bob] -> NULL
          j           temp
```

2. **操作：`j->next = temp->next`**

```
head -> [Charlie]    [Alice]    [Bob] -> NULL
          j            temp        ^ 
          |                        |
          |________________________|
```

3. **操作：`temp->next = j`**

```
head -> [Alice] -> [Charlie] -> [Bob] -> NULL
          temp       j
```

4. **操作：`head = temp`，`j = temp`**

```
head -> [Alice] -> [Charlie] -> [Bob] -> NULL
          j,temp
```

### 情况 2: `prev_j` 不为 `NULL`

初始链表：

```
head -> [Alice] -> [Charlie] -> [Bob] -> NULL
          prev_j      j           temp
```

1. **初始状态：**    `temp = j->next`

```
head -> [Alice] -> [Charlie] -> [Bob] -> NULL
          prev_j      j           temp
```

2. **操作：`j->next = temp->next`**

```
head -> [Alice] -> [Charlie]    [Bob]    NULL
          prev_j      j           temp    ^
           /          |                   |
        NULL          |___________________|
```

3. **操作：`temp->next = j`**

```
head -> [Alice]     [Bob] -> [Charlie] -> NULL
         prev_j     temp       j
```

4. **操作：`prev_j->next = temp`，`j = temp`**

```
head -> [Alice] -> [Bob] -> [Charlie] -> NULL
        prev_j     j,temp
```

